#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
#require 'nlp_types'

module NLPService
  class Client
    include ::Thrift::Client

    def processUserPost(post, postId, username, alreadyExists)
      send_processUserPost(post, postId, username, alreadyExists)
      return recv_processUserPost()
    end

    def send_processUserPost(post, postId, username, alreadyExists)
      send_message('processUserPost', ProcessUserPost_args, :post => post, :postId => postId, :username => username, :alreadyExists => alreadyExists)
    end

    def recv_processUserPost()
      result = receive_message(ProcessUserPost_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'processUserPost failed: unknown result')
    end

    def getAllPostsForResult(post, page, pageSize)
      send_getAllPostsForResult(post, page, pageSize)
      return recv_getAllPostsForResult()
    end

    def send_getAllPostsForResult(post, page, pageSize)
      send_message('getAllPostsForResult', GetAllPostsForResult_args, :post => post, :page => page, :pageSize => pageSize)
    end

    def recv_getAllPostsForResult()
      result = receive_message(GetAllPostsForResult_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllPostsForResult failed: unknown result')
    end

    def getUserAndPostInfoForResult(result)
      send_getUserAndPostInfoForResult(result)
      return recv_getUserAndPostInfoForResult()
    end

    def send_getUserAndPostInfoForResult(result)
      send_message('getUserAndPostInfoForResult', GetUserAndPostInfoForResult_args, :result => result)
    end

    def recv_getUserAndPostInfoForResult()
      result = receive_message(GetUserAndPostInfoForResult_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserAndPostInfoForResult failed: unknown result')
    end

    def autoSuggestPostsForPrefix(postPrefix, autoSuggestionCount)
      send_autoSuggestPostsForPrefix(postPrefix, autoSuggestionCount)
      return recv_autoSuggestPostsForPrefix()
    end

    def send_autoSuggestPostsForPrefix(postPrefix, autoSuggestionCount)
      send_message('autoSuggestPostsForPrefix', AutoSuggestPostsForPrefix_args, :postPrefix => postPrefix, :autoSuggestionCount => autoSuggestionCount)
    end

    def recv_autoSuggestPostsForPrefix()
      result = receive_message(AutoSuggestPostsForPrefix_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'autoSuggestPostsForPrefix failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_processUserPost(seqid, iprot, oprot)
      args = read_args(iprot, ProcessUserPost_args)
      result = ProcessUserPost_result.new()
      result.success = @handler.processUserPost(args.post, args.postId, args.username, args.alreadyExists)
      write_result(result, oprot, 'processUserPost', seqid)
    end

    def process_getAllPostsForResult(seqid, iprot, oprot)
      args = read_args(iprot, GetAllPostsForResult_args)
      result = GetAllPostsForResult_result.new()
      result.success = @handler.getAllPostsForResult(args.post, args.page, args.pageSize)
      write_result(result, oprot, 'getAllPostsForResult', seqid)
    end

    def process_getUserAndPostInfoForResult(seqid, iprot, oprot)
      args = read_args(iprot, GetUserAndPostInfoForResult_args)
      result = GetUserAndPostInfoForResult_result.new()
      result.success = @handler.getUserAndPostInfoForResult(args.result)
      write_result(result, oprot, 'getUserAndPostInfoForResult', seqid)
    end

    def process_autoSuggestPostsForPrefix(seqid, iprot, oprot)
      args = read_args(iprot, AutoSuggestPostsForPrefix_args)
      result = AutoSuggestPostsForPrefix_result.new()
      result.success = @handler.autoSuggestPostsForPrefix(args.postPrefix, args.autoSuggestionCount)
      write_result(result, oprot, 'autoSuggestPostsForPrefix', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class ProcessUserPost_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    POST = 1
    POSTID = 2
    USERNAME = 3
    ALREADYEXISTS = 4

    FIELDS = {
      POST => {:type => ::Thrift::Types::STRING, :name => 'post'},
      POSTID => {:type => ::Thrift::Types::I64, :name => 'postId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      ALREADYEXISTS => {:type => ::Thrift::Types::BOOL, :name => 'alreadyExists'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ProcessUserPost_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllPostsForResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    POST = 1
    PAGE = 2
    PAGESIZE = 3

    FIELDS = {
      POST => {:type => ::Thrift::Types::STRING, :name => 'post'},
      PAGE => {:type => ::Thrift::Types::I32, :name => 'page'},
      PAGESIZE => {:type => ::Thrift::Types::I32, :name => 'pageSize'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllPostsForResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserAndPostInfoForResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RESULT = 1

    FIELDS = {
      RESULT => {:type => ::Thrift::Types::STRING, :name => 'result'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserAndPostInfoForResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AutoSuggestPostsForPrefix_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    POSTPREFIX = 1
    AUTOSUGGESTIONCOUNT = 2

    FIELDS = {
      POSTPREFIX => {:type => ::Thrift::Types::STRING, :name => 'postPrefix'},
      AUTOSUGGESTIONCOUNT => {:type => ::Thrift::Types::I32, :name => 'autoSuggestionCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AutoSuggestPostsForPrefix_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

